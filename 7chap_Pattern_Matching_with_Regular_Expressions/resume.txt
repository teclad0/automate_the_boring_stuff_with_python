CAP 7 - PATTERN MATCHING WITH REGULAR EXPRESSIONS
CAP 7 - PADRÕES CORRESPONDENTES USANDO EXPRESSOES REGULARES

REGULAR EXPRESSIONS - permitem você especificar um padrão de texto na sua
procura.

CRIANDO OBJETOS DE REGEX (REGEX OBJECTS): 
   _todas as funções de regex em python estão no módulo chamado re
    >>import re
    
   _ re.compile('') : passar um valor string representando a sua expressão
   regular, retorna um Regex objeto padrão(ou simplesmente, um objeto
   Regex)

OBJETOS REGEX CORRESPONDENTES
    _ .search('') : método que procura na string passada a qualquer
    correspondencia com o regex, irá retornar None se o padrão regex não for
    encontrado, se encontrado irá retornar um Match object, que terá um
    _ group() contendo o texto correspondido da string procurada, em caso de
    mais de um ocorrencia, ira ser retornado a primeira ocorrencia
    _ .findall('') : retorna uma lista  de strings encontradas que
    corresponderam com o padrão regex

CARACTERES ESPECIAIS
    _para colocar caracteres especiais no seu regex como
    .  ^  $  *  +  ?  {  }  [  ]  \  |  (  )
    tem de usar assim:
    \.  \^  \$  \*  \+  \?  \{  \}  \[  \]  \\  \|  \(  \)

CÓDIGOS DE CLASSES DE CARACTERES COMUM
        \d              qualquer numero de 0 a 9                        
        \D              qualquer caractere que NÃO é um numero de 0 a 9
        \w              qualquer letra, numero ou esse caracetere _ (ou seja                        ,qualquer palavra)
        \W              qualquer caractere que NÃO uma letra, número ou esse
                        caractere _
        \s              qualquer espaço, tab ou nova linha(\n)
        \S              qualquer caractere que NÃO um espaço, tab ou nova
                        linha (\n)
        _[a-aA-Z] : encontra apenas letars
        _você pode definir a sua própria classe usando []. Por exemplo:
        vogalRegex = re.compile(r'[aeiouAEIOU]')
        encontrará qualquer vogal, minuscula ou maiuscula

SIMBOLOS REGEX        
        ? : encontra 0 ou 1 do grupo anterior
        * : encontra 0 ou mais do grupo anterior
        + : encontra 1 ou mais do grupo anterior
        {n} : encontra exatamente n do grupo anterior
        {n,} : encontra n ou mais do grupo anterior
        {,m} : encontra 0 ate m do grupo anetrior
        {n,m} : encontra pelo menos n e no máximo m do grupo anterior
        {n,m}? o
        ^exemplo : significa que a string precisa começar com exemplo
        exemplo& : significa que a string precisa terminar com exemplo
        ^exemplo&: significa que a string precisa começar e terminam com
        exemplo
        .  : corresponde a qualquer caractere, exceto \n
        .ex  : encontra qualquer caractere seguido de 'ex' (exceto \n) 
        .* : encontra tudo e qualquer caractere (exceto \n)
        .*, re.DOTALL : encontra tudo e qualquer caractere
        , re.I : encontra idependente se for maiusculo ou minusculo
        , re.VERBOSE: permite comentar dentro da expressão regular e colocar
        espaço
        [abc] : encontra qualquer caractere igual os dentro da []
        [^abc] : encontra qualquer caractere que não esteja dentro da []
        ()\1 : encontra a mesma instância encontrada do grupo 1

SUBSTITUINDO STRING COM O MÉTODO SUB()
    substituir os pradões de texto 
    _sub() : aceita dois argumentos, o primeiro é a string a substituir a
    correspondência e o segundo, o a string contendo o padrão a ser
    substituido. Retorna a string com as substituições aplicadas.



